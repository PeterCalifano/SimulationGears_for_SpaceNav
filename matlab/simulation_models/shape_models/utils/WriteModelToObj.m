function objFilename = untitled(model, filename, varargin)
%WRITE_MODEL_TO_OBJ Export mesh struct to a Wavefront .obj file.
%
%   objFilename = WRITE_MODEL_TO_OBJ(model, filename) writes the
%   vertices and faces from the mesh struct 'model' into the .obj file
%   specified by 'filename'. Returns the actual filename used.
%
%   Optional name-value pair:
%     'Overwrite' (logical) â€” overwrite existing files (default: false)
%
%   The 'model' struct must contain:
%     - v    : M-by-3 double array of vertex coordinates
%     - f.v  : N-by-K uint32 or double array of face vertex indices
%   Optional fields:
%     - vt   : M-by-2 double array of texture coordinates
%     - vn   : M-by-3 double array of normals
%     - f.vt : N-by-K texture-coordinate indices
%     - f.vn : N-by-K normal indices
%     - meta.mtllib : string for material library
%     - meta.count  : number of objects
%     - meta.o0, o1...oN with fields:
%         name (string), idx_v, idx_vt, idx_vn, idx_f (1x2 index ranges)

% Parse inputs
p = inputParser;
addRequired(p, 'model', @isstruct);
addRequired(p, 'filename', @(x) ischar(x)||isstring(x));
addParameter(p, 'Overwrite', false, @(x) islogical(x)&&isscalar(x));
parse(p, model, filename, varargin{:});
overwrite = p.Results.Overwrite;
model    = p.Results.model;
filename = char(p.Results.filename);

% Validate extension
[base,~,ext] = fileparts(filename);
if isempty(ext)
    ext = '.obj';
elseif ~strcmpi(ext, '.obj')
    error('writeModelToObj:InvalidExtension', 'Filename must end with .obj');
end
objFilename = fullfile(pwd, [base, ext]);

% Handle duplicates if not overwriting
if ~overwrite
    count = 0;
    while isfile(objFilename)
        count = count + 1;
        objFilename = fullfile(pwd, sprintf('%s_%d.obj', base, count));
    end
end

% Open file for writing
fileId = fopen(objFilename, 'w');
if fileId < 0
    error('writeModelToObj:FileOpenError', 'Cannot open file "%s" for writing.', objFilename);
end

try
    % Write header
    fprintf(fileId, '# Generated by writeModelToObj');
    if isfield(model, 'meta') && isfield(model.meta, 'mtllib')
        fprintf(fileId, 'mtllib %s', model.meta.mtllib);
    end

    % Determine counts
    objCount = 0;
    if isfield(model, 'meta') && isfield(model.meta, 'count')
        objCount = model.meta.count;
    end
    % If no objects, assume single
    if objCount == 0
        objects = struct('name', base, 'idx_v', [1,size(model.v,1)], ...
            'idx_vt', [1,size(getfield(model,'vt',zeros(0,2)),1)], ...
            'idx_vn', [1,size(getfield(model,'vn',zeros(0,3)),1)], ...
            'idx_f', [1,size(model.f.v,1)]);
    else
        for k = 0:objCount
            objects(k+1) = model.meta.(sprintf('o%d', k));
        end
    end

    % Flags
    hasVt = isfield(model, 'vt') && ~isempty(model.vt);
    hasVn = isfield(model, 'vn') && ~isempty(model.vn);
    hasFvt = isfield(model.f, 'vt');
    hasFvn = isfield(model.f, 'vn');

    % Write each object
    for o = objects
        fprintf(fileId, 'o %s', o.name);
        % Vertices
        vRange = o.idx_v(1):o.idx_v(2);
        vData = model.v(vRange, :);  % M-by-3
        fprintf(fileId, 'v %.6f %.6f %.6f', vData');
        % Texture coords
        if hasVt
            vtRange = o.idx_vt(1):o.idx_vt(2);
            vtData = model.vt(vtRange, :);
            fprintf(fileId, 'vt %.6f %.6f', vtData');
        end
        % Normals
        if hasVn
            vnRange = o.idx_vn(1):o.idx_vn(2);
            vnData = model.vn(vnRange, :);
            fprintf(fileId, 'vn %.4f %.4f %.4f', vnData');
        end
        % Material and smoothing
        if isfield(o, 'mtl')
            fprintf(fileId, 'usemtl %s', o.mtl);
        end
        if isfield(o, 's')
            fprintf(fileId, 's %s', o.s);
        end
        % Faces
        fRange = o.idx_f(1):o.idx_f(2);
        fv = model.f.v(fRange, :);
        
        if hasFvt
            fvt =  model.f.vt(fRange, :) ;
        else
            fvt = [];
        end

        if hasFvn
            fvn =  model.f.vn(fRange, :);
        else
            fvn = [];
        end

        for i = 1:size(fv,1)
            if hasFvt && hasFvn
                fprintf(fileId, 'f %d/%d/%d %d/%d/%d %d/%d/%d', ...
                    fv(i,1),fvt(i,1),fvn(i,1), fv(i,2),fvt(i,2),fvn(i,2), fv(i,3),fvt(i,3),fvn(i,3));
            elseif hasFvt
                fprintf(fileId, 'f %d/%d %d/%d %d/%d', ...
                    fv(i,1),fvt(i,1), fv(i,2),fvt(i,2), fv(i,3),fvt(i,3));
            elseif hasFvn
                fprintf(fileId, 'f %d//%d %d//%d %d//%d', ...
                    fv(i,1),fvn(i,1), fv(i,2),fvn(i,2), fv(i,3),fvn(i,3));
            else
                fprintf(fileId, 'f %d %d %d', fv(i,1), fv(i,2), fv(i,3));
            end
        end
    end

finally
    fclose(fileId);
end
end
